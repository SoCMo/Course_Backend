<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shu.course_backend.dao.CourseTimeDoMapper">
    <resultMap id="BaseResultMap" type="com.shu.course_backend.model.entity.CourseTimeDo">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="course_time" property="courseTime" jdbcType="VARCHAR"/>
        <result column="answer_address" property="answerAddress" jdbcType="VARCHAR"/>
        <result column="answer_time" property="answerTime" jdbcType="VARCHAR"/>
        <result column="course_id" property="courseId" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id
        , address, course_time, answer_address, answer_time, course_id
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.shu.course_backend.model.entity.CourseTimeDoExample">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from course_time
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from course_time
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from course_time
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.shu.course_backend.model.entity.CourseTimeDoExample">
        delete from course_time
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.shu.course_backend.model.entity.CourseTimeDo">
        insert into course_time (id, address, course_time,
                                 answer_address, answer_time, course_id)
        values (#{id,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR}, #{courseTime,jdbcType=VARCHAR},
                #{answerAddress,jdbcType=VARCHAR}, #{answerTime,jdbcType=VARCHAR}, #{courseId,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.shu.course_backend.model.entity.CourseTimeDo">
        insert into course_time
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="courseTime != null">
                course_time,
            </if>
            <if test="answerAddress != null">
                answer_address,
            </if>
            <if test="answerTime != null">
                answer_time,
            </if>
            <if test="courseId != null">
                course_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="courseTime != null">
                #{courseTime,jdbcType=VARCHAR},
            </if>
            <if test="answerAddress != null">
                #{answerAddress,jdbcType=VARCHAR},
            </if>
            <if test="answerTime != null">
                #{answerTime,jdbcType=VARCHAR},
            </if>
            <if test="courseId != null">
                #{courseId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.shu.course_backend.model.entity.CourseTimeDoExample"
            resultType="java.lang.Integer">
        select count(*) from course_time
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update course_time
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.address != null">
                address = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.courseTime != null">
                course_time = #{record.courseTime,jdbcType=VARCHAR},
            </if>
            <if test="record.answerAddress != null">
                answer_address = #{record.answerAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.answerTime != null">
                answer_time = #{record.answerTime,jdbcType=VARCHAR},
            </if>
            <if test="record.courseId != null">
                course_id = #{record.courseId,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update course_time
        set id = #{record.id,jdbcType=INTEGER},
        address = #{record.address,jdbcType=VARCHAR},
        course_time = #{record.courseTime,jdbcType=VARCHAR},
        answer_address = #{record.answerAddress,jdbcType=VARCHAR},
        answer_time = #{record.answerTime,jdbcType=VARCHAR},
        course_id = #{record.courseId,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.shu.course_backend.model.entity.CourseTimeDo">
        update course_time
        <set>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="courseTime != null">
                course_time = #{courseTime,jdbcType=VARCHAR},
            </if>
            <if test="answerAddress != null">
                answer_address = #{answerAddress,jdbcType=VARCHAR},
            </if>
            <if test="answerTime != null">
                answer_time = #{answerTime,jdbcType=VARCHAR},
            </if>
            <if test="courseId != null">
                course_id = #{courseId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.shu.course_backend.model.entity.CourseTimeDo">
        update course_time
        set address        = #{address,jdbcType=VARCHAR},
            course_time    = #{courseTime,jdbcType=VARCHAR},
            answer_address = #{answerAddress,jdbcType=VARCHAR},
            answer_time    = #{answerTime,jdbcType=VARCHAR},
            course_id      = #{courseId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>